# Import Standard Libraries
import os

# Import Third-Party Libraries
from PIL import Image, ImageFile

# Import Local Libraries
from .constants import __repo_url__ as REPO_URL


class LeaderPortraits:
    def __init__(self, path_to_project):
        self.path_to_project = path_to_project
        self.leaders_path = os.path.join(self.path_to_project, "gfx", "leaders")
        self.register_file = os.path.join(self.path_to_project, "interface", "_leader_portraits.gfx")
        self.target_width = 156
        self.target_height = 210

    def _delete_register_file(self):
        if os.path.exists(self.register_file):
            os.remove(self.register_file)

    def _delete_old_dds_files(self):
        for root, _, files in os.walk(self.leaders_path):
            for filename in files:
                if filename.lower().endswith('.dds'):
                    os.remove(os.path.join(root, filename))

    def process_images(self):

        self._delete_register_file()

        ImageFile.LOAD_TRUNCATED_IMAGES = True  # Handle truncated images

        # Variable to accumulate spriteTypes data
        generation_comment = f"# This File was automatically generated by Hoi4 Modding Suite\n# You can get it here: {REPO_URL}\n\n"
        sprite_types_data = generation_comment + "spriteTypes = {\n\n"

        # Get all folders in leaders_path
        folder_names = [name for name in os.listdir(self.leaders_path)
                        if os.path.isdir(os.path.join(self.leaders_path, name))]

        # Initialize variables to keep track of folder processing
        current_folder = None
        folder_started = False

        # Traverse each folder separately
        for folder_name in folder_names:
            folder_path = os.path.join(self.leaders_path, folder_name)
            for root, _, files in os.walk(folder_path):
                for filename in files:
                    if filename.lower().endswith(('png', 'jpg', 'jpeg')):
                        img_path = os.path.join(root, filename)
                        try:
                            with Image.open(img_path) as img:
                                img_resized = img.resize((self.target_width, self.target_height), Image.Resampling.LANCZOS)

                                # Create DDS file path in the same directory as original image
                                dds_filename = f"GFX_portrait_{folder_name}_{os.path.splitext(filename)[0]}"
                                dds_path = os.path.join(root, dds_filename + ".dds")

                                # Save resized image as DDS in the same directory
                                img_resized.save(dds_path, format='DDS')

                                # If entering a new folder, write the folder header
                                if folder_name != current_folder:
                                    sprite_types_data += f"\t### {folder_name.upper()}\n\n"
                                    folder_started = True
                                    current_folder = folder_name

                                # Write spriteType entry for current image
                                sprite_types_data += "\tspriteType = {\n"
                                sprite_types_data += f"\t\tname = {dds_filename}\n"
                                sprite_types_data += f"\t\ttexturefile = \"gfx/leaders/{folder_name}/{dds_filename}.dds\"\n"
                                sprite_types_data += "\t}\n\n"

                                print(f"Processed {dds_filename}")
                        except Exception as e:
                            print(f"Error processing {img_path}: {e}")

        sprite_types_data += "}\n"

        # Write accumulated data to spriteTypes.txt file
        with open(self.register_file, 'w', encoding='utf-8') as f:
            f.write(sprite_types_data)
